// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  USER
  OPERATOR
}

enum UserStatus {
  DISABLED
  ENABLED
}

model User {
  id             String      @id @default(uuid())
  email          String      @unique
  password       String      @unique
  name           String
  lastName       String      @map("last_name")
  status         UserStatus? @default(ENABLED)
  createdAt      DateTime?   @default(now()) @map("created_at")
  roles          UserRole[]  @default([USER])
  profileImage   String?     @map("profile_image")
  posts          Post[]
  jobs           Job[]
  jobDescription String?     @map("job_description")
  refreshHash    String?     @map("refresh_hash")

  @@index([id])
  @@map("users")
}

model Post {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime?  @default(now())
  title       String
  published   Boolean?   @default(false)
  authorId    String
  categoryIDs String[]
  author      User       @relation(fields: [authorId], references: [id])
  categories  Category[] @relation()

  @@map("posts")
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String
  posts Post[] @relation()

  @@map("category")
}

//-------Job section-----------------------------------------------------

enum JobStatus {
  ACTIVE
  ARCHIVED
}

enum ScheduleInterval {
  REPEAT
  NOT_REPEAT
}

enum EtlexecStatus {
  QUEUED
  FAILED
  SUCCESS
  SUMMARY
}

model Job {
  batchid         String        @id @default(uuid())
  mappingTaskName String        @map("mapping_task_name")
  jobTaskName     String?       @map("job_task_name")
  user            User?         @relation(fields: [userId], references: [id])
  userId          String?       @map("user_id")
  username        String
  // startedTstamp   DateTime
  // updatedTstamp   DateTime
  // completedTstamp DateTime?
  // isn't represented in database
  startedAt       DateTime      @default(now()) @map("started_at")
  updatedAt       DateTime?     @updatedAt @map("updated_at")
  completedAt     DateTime?     @map("completed_at")
  etlexecStatus   EtlexecStatus @map("etlexec_status")
  status          JobStatus
  deleteFlag      Boolean       @default(false)
  schedule        Schedule?

  @@map("jobs")
}

model Schedule {
  scheduleId          Int               @id @default(autoincrement())
  scheduleName        String
  description         String?
  startDate           DateTime?
  timezone            String?
  interval            ScheduleInterval?
  frequency           Int?
  repeat              Boolean?          @default(false)
  hourlyFrequencyKill Boolean?          @default(false)
  job                 Job               @relation(fields: [jobBatchId], references: [batchid])
  jobBatchId          String            @unique

  @@map("schedules")
}

model Task {
  id            Int    @id @default(autoincrement())
  mappingTaskId String @default(uuid())
  mappingName   String

  srcConnectionName    String
  targetConnectionName String

  createdBy           DateTime @default(now())
  srcConnectorType    String
  srcConnectionObject String

  targetConnectorType    String?
  targetConnectionObject String?
  updatedTimestamp       DateTime

  source      String?
  target      String?
  createStage String?
  schedule    DateTime?
  updated     DateTime?

  @@map("tasks")
}

//-------Connection section-----------------------------------------------------
model ConnParams {
  id                        String      @id @default(uuid())
  agentId                   String      @unique()
  agentGroupId              String
  orgId                     String
  authentication_TYPE       String?
  useEC2RoletoAssumeRole    String?
  federatedUsername         String?
  samlidentityProviderARN   String?
  credentialProfileFilePath String?
  otherAuthenticationType   String?
  accessKey                 String?
  folderPath                String?
  profileName               String?
  iamroleARN                String?
  idpSsoUrl                 String?
  secretKey                 String?
  federatedSSOIdP           String?
  regionName                String?
  roleARN                   String?
  s3RegionName              String?
  connection                Connection? @relation(fields: [agentId], references: [agentId])

  @@map("conn-params")
}

model Connection {
  id                   String      @id @default(uuid())
  orgId                String?
  name                 String
  type                 String
  description          String?
  agentId              String?     @unique()
  runtimeEnvironmentId String?
  instanceDisplayName  String?
  host                 String?
  database             String?
  codepage             String?
  adjustedJdbcHostName String?
  shortDescription     String?
  port                 String?
  username             String?
  password             String?
  createTime           DateTime?
  updateTime           DateTime?
  createdBy            String?
  updatedBy            String?
  connParams           ConnParams?

  @@map("connectuins")
}

//-------Next learn  start ----------------------------------------------------------

model Customer {
  id        String @id @default(uuid())
  name      String
  email     String
  image_url String
}

enum InvoiceStatus {
  PENDING
  PAID
}

model Invoice {
  id          String        @id @default(uuid())
  customer_id String
  amount      Int
  date        DateTime      @db.Date
  status      InvoiceStatus
}

model Product {
  id        String  @id @default(uuid())
  name      String
  price     Int
  quantity  Int
  image_url String?
}
